//
//  Graficos.swift
//  concorSwiftSpring.com.RentalApps.galderma2017LitioB
//
//  Created by PixelCut on 28-05-17.
//  Copyright © 2017 PixelCut. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Graficos : NSObject {

    //// Drawing Methods

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 845, height: 407), resizing: ResizingBehavior = .aspectFit, valueH1G1: CGFloat = 283, valueH2G1: CGFloat = 172) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 845, height: 407), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 845, y: resizedFrame.height / 407)


        //// Color Declarations
        let fillColor = UIColor(red: 0.996, green: 0.996, blue: 0.995, alpha: 1.000)
        let textForeground2 = UIColor(red: 0.000, green: 0.224, blue: 0.457, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.342, green: 0.344, blue: 0.352, alpha: 1.000)
        let strokeColor = UIColor(red: 0.000, green: 0.224, blue: 0.457, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.255, green: 0.649, blue: 0.166, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.043, green: 0.444, blue: 0.705, alpha: 1.000)

        //// Variable Declarations
        let h1G1: CGFloat = valueH1G1 < 0 ? 0 : (valueH1G1 > 249 ? 249 : valueH1G1)
        let negH1G1: CGFloat = -h1G1
        let hiddenH1G1 = h1G1 == 249 ? true : false
        let h2G1: CGFloat = valueH2G1 < 0 ? 0 : (valueH2G1 > 100 ? 100 : valueH2G1)
        let negH2G1: CGFloat = -h2G1
        let hiddenH2G1 = h2G1 == 100 ? true : false

        //// Group 2
        //// Rectangle Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: -0.02, width: 845.3, height: 406.6))
        fillColor.setFill()
        rectanglePath.fill()

        context.restoreGState()


        //// Label 3 Drawing
        let label3Rect = CGRect(x: 260.1, y: -0.36, width: 309.31, height: 31)
        let label3TextContent = "Conteo de Colonias de S.aureus"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .center
        let label3FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 21), NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label3Style]

        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()


        //// Label 4 Drawing
        let label4Rect = CGRect(x: 300.52, y: 27, width: 229.17, height: 30.64)
        let label4TextContent = "Basal y 28 días después"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .center
        let label4FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 21), NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label4Style]

        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()


        //// Label 7 Drawing
        context.saveGState()
        context.translateBy(x: 186.59, y: 246.42)
        context.rotate(by: -90 * CGFloat.pi/180)

        let label7Rect = CGRect(x: 0, y: 0, width: 76.17, height: 24)
        let label7TextContent = "S. aureus*"
        let label7Style = NSMutableParagraphStyle()
        label7Style.alignment = .center
        let label7FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 16), NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label7Style]

        let label7TextHeight: CGFloat = label7TextContent.boundingRect(with: CGSize(width: label7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label7Rect)
        label7TextContent.draw(in: CGRect(x: label7Rect.minX, y: label7Rect.minY + (label7Rect.height - label7TextHeight) / 2, width: label7Rect.width, height: label7TextHeight), withAttributes: label7FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Label 8 Drawing
        context.saveGState()
        context.translateBy(x: 186.59, y: 169.96)
        context.rotate(by: -90 * CGFloat.pi/180)

        let label8Rect = CGRect(x: 0, y: 0, width: 47.33, height: 24)
        let label8TextContent = " count"
        let label8Style = NSMutableParagraphStyle()
        label8Style.alignment = .center
        let label8FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 16), NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label8Style]

        let label8TextHeight: CGFloat = label8TextContent.boundingRect(with: CGSize(width: label8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label8Rect)
        label8TextContent.draw(in: CGRect(x: label8Rect.minX, y: label8Rect.minY + (label8Rect.height - label8TextHeight) / 2, width: label8Rect.width, height: label8TextHeight), withAttributes: label8FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Label 9 Drawing
        let label9Rect = CGRect(x: 215.11, y: 202.74, width: 17.84, height: 38)
        let label9TextContent = "\n0,2"
        let label9Style = NSMutableParagraphStyle()
        label9Style.alignment = .center
        let label9FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 12), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label9Style]

        let label9TextHeight: CGFloat = label9TextContent.boundingRect(with: CGSize(width: label9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label9Rect)
        label9TextContent.draw(in: CGRect(x: label9Rect.minX, y: label9Rect.minY + (label9Rect.height - label9TextHeight) / 2, width: label9Rect.width, height: label9TextHeight), withAttributes: label9FontAttributes)
        context.restoreGState()


        //// Label 10 Drawing
        let label10Rect = CGRect(x: 215.19, y: 69.25, width: 17.62, height: 38)
        let label10TextContent = "\n0,5"
        let label10Style = NSMutableParagraphStyle()
        label10Style.alignment = .center
        let label10FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 12), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label10Style]

        let label10TextHeight: CGFloat = label10TextContent.boundingRect(with: CGSize(width: label10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label10Rect)
        label10TextContent.draw(in: CGRect(x: label10Rect.minX, y: label10Rect.minY + (label10Rect.height - label10TextHeight) / 2, width: label10Rect.width, height: label10TextHeight), withAttributes: label10FontAttributes)
        context.restoreGState()


        //// Rectangle 12 Drawing
        context.saveGState()
        context.translateBy(x: 306, y: (negH1G1 + 53.3939))

        let rectangle12Path = UIBezierPath(rect: CGRect(x: 0, y: 294, width: 92.7, height: h1G1))
        fillColor2.setFill()
        rectangle12Path.fill()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 252.24, y: 57.4))
        bezierPath.addLine(to: CGPoint(x: 252.24, y: 347.31))
        strokeColor.setStroke()
        bezierPath.lineWidth = 0.55
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 244.53, y: 231.69))
        bezier2Path.addLine(to: CGPoint(x: 259.75, y: 231.69))
        strokeColor.setStroke()
        bezier2Path.lineWidth = 0.35
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 244.53, y: 99.21))
        bezier3Path.addLine(to: CGPoint(x: 259.75, y: 99.21))
        strokeColor.setStroke()
        bezier3Path.lineWidth = 0.35
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(rect: CGRect(x: 468, y: (negH2G1 + 347.3559), width: 92.7, height: h2G1))
        fillColor3.setFill()
        rectangle13Path.fill()


        if (hiddenH2G1) {
            //// Label 11 Drawing
            let label11Rect = CGRect(x: 481.47, y: 114.85, width: 69.02, height: 74)
            let label11TextContent = "\n244%"
            let label11Style = NSMutableParagraphStyle()
            label11Style.alignment = .center
            let label11FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 25), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label11Style]

            let label11TextHeight: CGFloat = label11TextContent.boundingRect(with: CGSize(width: label11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label11FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: label11Rect)
            label11TextContent.draw(in: CGRect(x: label11Rect.minX, y: label11Rect.minY + (label11Rect.height - label11TextHeight) / 2, width: label11Rect.width, height: label11TextHeight), withAttributes: label11FontAttributes)
            context.restoreGState()


            //// Label 12 Drawing
            let label12Rect = CGRect(x: 490.11, y: 208.86, width: 52.38, height: 36)
            let label12TextContent = "\np<0.1431"
            let label12Style = NSMutableParagraphStyle()
            label12Style.alignment = .center
            let label12FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 12), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label12Style]

            let label12TextHeight: CGFloat = label12TextContent.boundingRect(with: CGSize(width: label12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label12FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: label12Rect)
            label12TextContent.draw(in: CGRect(x: label12Rect.minX, y: label12Rect.minY + (label12Rect.height - label12TextHeight) / 2, width: label12Rect.width, height: label12TextHeight), withAttributes: label12FontAttributes)
            context.restoreGState()
        }


        if (hiddenH1G1) {
            //// Label 13 Drawing
            let label13Rect = CGRect(x: 328.85, y: 68.96, width: 56.32, height: 36)
            let label13TextContent = "p<0.067"
            let label13Style = NSMutableParagraphStyle()
            label13Style.alignment = .center
            let label13FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 12), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label13Style]

            let label13TextHeight: CGFloat = label13TextContent.boundingRect(with: CGSize(width: label13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label13FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: label13Rect)
            label13TextContent.draw(in: CGRect(x: label13Rect.minX, y: label13Rect.minY + (label13Rect.height - label13TextHeight) / 2, width: label13Rect.width, height: label13TextHeight), withAttributes: label13FontAttributes)
            context.restoreGState()
        }


        if (hiddenH2G1) {
            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 514.47, y: 186.61))
            bezier4Path.addLine(to: CGPoint(x: 514.47, y: 223.54))
            strokeColor2.setStroke()
            bezier4Path.lineWidth = 2.96
            bezier4Path.lineCapStyle = .round
            bezier4Path.lineJoinStyle = .round
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 514.47, y: 156.01))
            bezier5Path.addLine(to: CGPoint(x: 514.47, y: 109.91))
            strokeColor2.setStroke()
            bezier5Path.lineWidth = 2.96
            bezier5Path.lineCapStyle = .round
            bezier5Path.lineJoinStyle = .round
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 521.35, y: 109.81))
            bezier6Path.addLine(to: CGPoint(x: 514.34, y: 100.47))
            bezier6Path.addLine(to: CGPoint(x: 507.36, y: 109.81))
            strokeColor2.setStroke()
            bezier6Path.lineWidth = 2.72
            bezier6Path.lineCapStyle = .round
            bezier6Path.lineJoinStyle = .round
            bezier6Path.stroke()
        }


        //// Label 14 Drawing
        let label14Rect = CGRect(x: 315.39, y: 346.84, width: 76.24, height: 48)
        let label14TextContent = "CONTROL"
        let label14Style = NSMutableParagraphStyle()
        label14Style.alignment = .center
        let label14FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 14), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label14Style]

        let label14TextHeight: CGFloat = label14TextContent.boundingRect(with: CGSize(width: label14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label14Rect)
        label14TextContent.draw(in: CGRect(x: label14Rect.minX, y: label14Rect.minY + (label14Rect.height - label14TextHeight) / 2, width: label14Rect.width, height: label14TextHeight), withAttributes: label14FontAttributes)
        context.restoreGState()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 613.96, y: 347.18))
        bezier7Path.addLine(to: CGPoint(x: 239.43, y: 347.18))
        strokeColor.setStroke()
        bezier7Path.lineWidth = 0.64
        bezier7Path.lineCapStyle = .round
        bezier7Path.lineJoinStyle = .round
        bezier7Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 847, height: 476), resizing: ResizingBehavior = .aspectFit, valueH1G2: CGFloat = 312, valueH2G2: CGFloat = 423) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 847, height: 476), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 847, y: resizedFrame.height / 476)


        //// Color Declarations
        let fillColor = UIColor(red: 0.996, green: 0.996, blue: 0.995, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.342, green: 0.344, blue: 0.352, alpha: 1.000)
        let strokeColor = UIColor(red: 0.000, green: 0.224, blue: 0.457, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.255, green: 0.649, blue: 0.166, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.043, green: 0.444, blue: 0.705, alpha: 1.000)

        //// Variable Declarations
        let h1G2: CGFloat = valueH1G2 < 0 ? 0 : (valueH1G2 > 257 ? 257 : valueH1G2)
        let negH1G2: CGFloat = -h1G2
        let hiddenH1G2 = h1G2 == 257 ? true : false
        let h2G2: CGFloat = valueH2G2 < 0 ? 0 : (valueH2G2 > 328 ? 328 : valueH2G2)
        let negH2G2: CGFloat = -h2G2

        //// Group 2
        //// Rectangle Drawing
        context.saveGState()
        context.setAlpha(0.7)

        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 846.6, height: 476.2))
        fillColor.setFill()
        rectanglePath.fill()

        context.restoreGState()


        //// Label Drawing
        let labelRect = CGRect(x: 280.24, y: 11.54, width: 109.85, height: 27)
        let labelTextContent = "Cantidad de "
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 18), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: labelStyle]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 399.2, y: 11.54, width: 152.94, height: 27)
        let label2TextContent = "-Defensina hBD-2"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 18), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label2Style]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        //// Label 3 Drawing
        let label3Rect = CGRect(x: 204.98, y: 30.44, width: 426.44, height: 27)
        let label3TextContent = "Basal y 72 horas después de la aplicación (N =36)"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .center
        let label3FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 18), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label3Style]

        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()


        //// Label 7 Drawing
        let label7Rect = CGRect(x: 206.14, y: 365.24, width: 9.01, height: 46)
        let label7TextContent = "\n0"
        let label7Style = NSMutableParagraphStyle()
        label7Style.alignment = .center
        let label7FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 14), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label7Style]

        let label7TextHeight: CGFloat = label7TextContent.boundingRect(with: CGSize(width: label7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label7Rect)
        label7TextContent.draw(in: CGRect(x: label7Rect.minX, y: label7Rect.minY + (label7Rect.height - label7TextHeight) / 2, width: label7Rect.width, height: label7TextHeight), withAttributes: label7FontAttributes)
        context.restoreGState()


        //// Label 8 Drawing
        let label8Rect = CGRect(x: 300.94, y: 387.68, width: 71.43, height: 46)
        let label8TextContent = "\nCONTROL"
        let label8Style = NSMutableParagraphStyle()
        label8Style.alignment = .center
        let label8FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 14), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label8Style]

        let label8TextHeight: CGFloat = label8TextContent.boundingRect(with: CGSize(width: label8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label8Rect)
        label8TextContent.draw(in: CGRect(x: label8Rect.minX, y: label8Rect.minY + (label8Rect.height - label8TextHeight) / 2, width: label8Rect.width, height: label8TextHeight), withAttributes: label8FontAttributes)
        context.restoreGState()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 280.58, y: (negH1G2 + 406.995), width: 108.55, height: h1G2))
        fillColor2.setFill()
        rectangle10Path.fill()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: 486.18, y: (negH2G2 + 406.995), width: 108.55, height: h2G2))
        fillColor3.setFill()
        rectangle11Path.fill()


        if (hiddenH1G2) {
            //// Label 9 Drawing
            let label9Rect = CGRect(x: 309.02, y: 68.56, width: 58.29, height: 86)
            let label9TextContent = "\n17%"
            let label9Style = NSMutableParagraphStyle()
            label9Style.alignment = .center
            let label9FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 30), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label9Style]

            let label9TextHeight: CGFloat = label9TextContent.boundingRect(with: CGSize(width: label9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label9FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: label9Rect)
            label9TextContent.draw(in: CGRect(x: label9Rect.minX, y: label9Rect.minY + (label9Rect.height - label9TextHeight) / 2, width: label9Rect.width, height: label9TextHeight), withAttributes: label9FontAttributes)
            context.restoreGState()
        }


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 661.49, y: 406.6))
        bezierPath.addLine(to: CGPoint(x: 222.87, y: 406.6))
        strokeColor.setStroke()
        bezierPath.lineWidth = 0.74
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        if (hiddenH1G2) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 335.74, y: 115.22))
            bezier2Path.addLine(to: CGPoint(x: 335.74, y: 89.99))
            strokeColor2.setStroke()
            bezier2Path.lineWidth = 3.47
            bezier2Path.lineCapStyle = .round
            bezier2Path.lineJoinStyle = .round
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 344.06, y: 91.4))
            bezier3Path.addLine(to: CGPoint(x: 335.85, y: 80.46))
            bezier3Path.addLine(to: CGPoint(x: 327.68, y: 91.4))
            strokeColor2.setStroke()
            bezier3Path.lineWidth = 3.19
            bezier3Path.lineCapStyle = .round
            bezier3Path.lineJoinStyle = .round
            bezier3Path.stroke()
        }


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 237.86, y: 67.22))
        bezier4Path.addLine(to: CGPoint(x: 237.86, y: 406.76))
        strokeColor.setStroke()
        bezier4Path.lineWidth = 0.64
        bezier4Path.lineCapStyle = .round
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 228.84, y: 271.35))
        bezier5Path.addLine(to: CGPoint(x: 246.66, y: 271.35))
        strokeColor.setStroke()
        bezier5Path.lineWidth = 0.41
        bezier5Path.lineCapStyle = .round
        bezier5Path.lineJoinStyle = .round
        bezier5Path.stroke()


        //// Label 10 Drawing
        let label10Rect = CGRect(x: 180.48, y: 333.64, width: 35.23, height: 46)
        let label10TextContent = "\n2000"
        let label10Style = NSMutableParagraphStyle()
        label10Style.alignment = .center
        let label10FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 15), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label10Style]

        let label10TextHeight: CGFloat = label10TextContent.boundingRect(with: CGSize(width: label10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label10Rect)
        label10TextContent.draw(in: CGRect(x: label10Rect.minX, y: label10Rect.minY + (label10Rect.height - label10TextHeight) / 2, width: label10Rect.width, height: label10TextHeight), withAttributes: label10FontAttributes)
        context.restoreGState()


        //// Label 11 Drawing
        let label11Rect = CGRect(x: 179.05, y: 284.95, width: 36.35, height: 46)
        let label11TextContent = "\n4000"
        let label11Style = NSMutableParagraphStyle()
        label11Style.alignment = .center
        let label11FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 14), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label11Style]

        let label11TextHeight: CGFloat = label11TextContent.boundingRect(with: CGSize(width: label11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label11Rect)
        label11TextContent.draw(in: CGRect(x: label11Rect.minX, y: label11Rect.minY + (label11Rect.height - label11TextHeight) / 2, width: label11Rect.width, height: label11TextHeight), withAttributes: label11FontAttributes)
        context.restoreGState()


        //// Label 12 Drawing
        let label12Rect = CGRect(x: 179.85, y: 234.55, width: 35.76, height: 46)
        let label12TextContent = "\n6000"
        let label12Style = NSMutableParagraphStyle()
        label12Style.alignment = .center
        let label12FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 15), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label12Style]

        let label12TextHeight: CGFloat = label12TextContent.boundingRect(with: CGSize(width: label12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label12Rect)
        label12TextContent.draw(in: CGRect(x: label12Rect.minX, y: label12Rect.minY + (label12Rect.height - label12TextHeight) / 2, width: label12Rect.width, height: label12TextHeight), withAttributes: label12FontAttributes)
        context.restoreGState()


        //// Label 13 Drawing
        let label13Rect = CGRect(x: 179.56, y: 182.38, width: 35.84, height: 46)
        let label13TextContent = "\n8000"
        let label13Style = NSMutableParagraphStyle()
        label13Style.alignment = .center
        let label13FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 15), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label13Style]

        let label13TextHeight: CGFloat = label13TextContent.boundingRect(with: CGSize(width: label13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label13Rect)
        label13TextContent.draw(in: CGRect(x: label13Rect.minX, y: label13Rect.minY + (label13Rect.height - label13TextHeight) / 2, width: label13Rect.width, height: label13TextHeight), withAttributes: label13FontAttributes)
        context.restoreGState()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 228.84, y: 218.25))
        bezier6Path.addLine(to: CGPoint(x: 246.66, y: 218.25))
        strokeColor.setStroke()
        bezier6Path.lineWidth = 0.41
        bezier6Path.lineCapStyle = .round
        bezier6Path.lineJoinStyle = .round
        bezier6Path.stroke()


        //// Label 14 Drawing
        let label14Rect = CGRect(x: 172.56, y: 133.43, width: 43.46, height: 46)
        let label14TextContent = "\n10000"
        let label14Style = NSMutableParagraphStyle()
        label14Style.alignment = .center
        let label14FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 15), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label14Style]

        let label14TextHeight: CGFloat = label14TextContent.boundingRect(with: CGSize(width: label14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label14Rect)
        label14TextContent.draw(in: CGRect(x: label14Rect.minX, y: label14Rect.minY + (label14Rect.height - label14TextHeight) / 2, width: label14Rect.width, height: label14TextHeight), withAttributes: label14FontAttributes)
        context.restoreGState()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 228.84, y: 169.28))
        bezier7Path.addLine(to: CGPoint(x: 246.66, y: 169.28))
        strokeColor.setStroke()
        bezier7Path.lineWidth = 0.41
        bezier7Path.lineCapStyle = .round
        bezier7Path.lineJoinStyle = .round
        bezier7Path.stroke()


        //// Label 15 Drawing
        let label15Rect = CGRect(x: 173.94, y: 80.33, width: 42.65, height: 46)
        let label15TextContent = "\n12000"
        let label15Style = NSMutableParagraphStyle()
        label15Style.alignment = .center
        let label15FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 15), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label15Style]

        let label15TextHeight: CGFloat = label15TextContent.boundingRect(with: CGSize(width: label15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label15Rect)
        label15TextContent.draw(in: CGRect(x: label15Rect.minX, y: label15Rect.minY + (label15Rect.height - label15TextHeight) / 2, width: label15Rect.width, height: label15TextHeight), withAttributes: label15FontAttributes)
        context.restoreGState()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 228.84, y: 116.18))
        bezier8Path.addLine(to: CGPoint(x: 246.66, y: 116.18))
        strokeColor.setStroke()
        bezier8Path.lineWidth = 0.41
        bezier8Path.lineCapStyle = .round
        bezier8Path.lineJoinStyle = .round
        bezier8Path.stroke()


        //// Label 16 Drawing
        let label16Rect = CGRect(x: 172.47, y: 31.36, width: 43.77, height: 46)
        let label16TextContent = "\n14000"
        let label16Style = NSMutableParagraphStyle()
        label16Style.alignment = .center
        let label16FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 15), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label16Style]

        let label16TextHeight: CGFloat = label16TextContent.boundingRect(with: CGSize(width: label16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label16Rect)
        label16TextContent.draw(in: CGRect(x: label16Rect.minX, y: label16Rect.minY + (label16Rect.height - label16TextHeight) / 2, width: label16Rect.width, height: label16TextHeight), withAttributes: label16FontAttributes)
        context.restoreGState()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 228.84, y: 67.22))
        bezier9Path.addLine(to: CGPoint(x: 246.66, y: 67.22))
        strokeColor.setStroke()
        bezier9Path.lineWidth = 0.41
        bezier9Path.lineCapStyle = .round
        bezier9Path.lineJoinStyle = .round
        bezier9Path.stroke()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 228.84, y: 319.77))
        bezier10Path.addLine(to: CGPoint(x: 246.66, y: 319.77))
        strokeColor.setStroke()
        bezier10Path.lineWidth = 0.41
        bezier10Path.lineCapStyle = .round
        bezier10Path.lineJoinStyle = .round
        bezier10Path.stroke()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 228.84, y: 367.83))
        bezier11Path.addLine(to: CGPoint(x: 246.66, y: 367.83))
        strokeColor.setStroke()
        bezier11Path.lineWidth = 0.41
        bezier11Path.lineCapStyle = .round
        bezier11Path.lineJoinStyle = .round
        bezier11Path.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 837, height: 466), resizing: ResizingBehavior = .aspectFit, valueH1G3: CGFloat = 116, valueH2G3: CGFloat = 276) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 837, height: 466), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 837, y: resizedFrame.height / 466)


        //// Color Declarations
        let fillColor = UIColor(red: 0.996, green: 0.996, blue: 0.995, alpha: 1.000)
        let textForeground2 = UIColor(red: 0.000, green: 0.224, blue: 0.457, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.342, green: 0.344, blue: 0.352, alpha: 1.000)
        let strokeColor = UIColor(red: 0.000, green: 0.224, blue: 0.457, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.255, green: 0.649, blue: 0.166, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.043, green: 0.444, blue: 0.705, alpha: 1.000)

        //// Variable Declarations
        let h1G3: CGFloat = valueH1G3 < 0 ? 0 : (valueH1G3 > 116 ? 116 : valueH1G3)
        let negH1G3: CGFloat = -h1G3
        let hiddenH1G3 = h1G3 == 116 ? true : false
        let h2G3: CGFloat = valueH2G3 < 0 ? 0 : (valueH2G3 > 247 ? 247 : valueH2G3)
        let negH2G3: CGFloat = -h2G3
        let hiddenH2G3 = h2G3 == 247 ? true : false

        //// Group 2
        //// Rectangle Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 837.2, height: 465.55))
        fillColor.setFill()
        rectanglePath.fill()

        context.restoreGState()


        //// Label Drawing
        let labelRect = CGRect(x: 339.98, y: 23.24, width: 238.35, height: 32)
        let labelTextContent = "Cantidad de Catelicidina"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 21), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: labelStyle]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 258.05, y: 44.54, width: 401.89, height: 32)
        let label2TextContent = "Basal y 72 horas después de la aplicación"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 21), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label2Style]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        //// Label 5 Drawing
        let label5Rect = CGRect(x: 152.41, y: 315.57, width: 11.28, height: 54)
        let label5TextContent = "\n0"
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .center
        let label5FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 18), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label5Style]

        let label5TextHeight: CGFloat = label5TextContent.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        label5TextContent.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()


        //// Label 6 Drawing
        let label6Rect = CGRect(x: 119.89, y: 252.68, width: 43.79, height: 54)
        let label6TextContent = "\n5000"
        let label6Style = NSMutableParagraphStyle()
        label6Style.alignment = .center
        let label6FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 18), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label6Style]

        let label6TextHeight: CGFloat = label6TextContent.boundingRect(with: CGSize(width: label6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label6Rect)
        label6TextContent.draw(in: CGRect(x: label6Rect.minX, y: label6Rect.minY + (label6Rect.height - label6TextHeight) / 2, width: label6Rect.width, height: label6TextHeight), withAttributes: label6FontAttributes)
        context.restoreGState()


        //// Label 7 Drawing
        let label7Rect = CGRect(x: 109.83, y: 193.44, width: 54.43, height: 54)
        let label7TextContent = "\n10000"
        let label7Style = NSMutableParagraphStyle()
        label7Style.alignment = .center
        let label7FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 18), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label7Style]

        let label7TextHeight: CGFloat = label7TextContent.boundingRect(with: CGSize(width: label7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label7Rect)
        label7TextContent.draw(in: CGRect(x: label7Rect.minX, y: label7Rect.minY + (label7Rect.height - label7TextHeight) / 2, width: label7Rect.width, height: label7TextHeight), withAttributes: label7FontAttributes)
        context.restoreGState()


        //// Label 8 Drawing
        let label8Rect = CGRect(x: 272.57, y: 345.85, width: 89.46, height: 54)
        let label8TextContent = "\nCONTROL"
        let label8Style = NSMutableParagraphStyle()
        label8Style.alignment = .center
        let label8FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 18), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label8Style]

        let label8TextHeight: CGFloat = label8TextContent.boundingRect(with: CGSize(width: label8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label8Rect)
        label8TextContent.draw(in: CGRect(x: label8Rect.minX, y: label8Rect.minY + (label8Rect.height - label8TextHeight) / 2, width: label8Rect.width, height: label8TextHeight), withAttributes: label8FontAttributes)
        context.restoreGState()


        //// Label 9 Drawing
        let label9Rect = CGRect(x: 111.56, y: 131.83, width: 53.08, height: 54)
        let label9TextContent = "\n15000"
        let label9Style = NSMutableParagraphStyle()
        label9Style.alignment = .center
        let label9FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 18), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label9Style]

        let label9TextHeight: CGFloat = label9TextContent.boundingRect(with: CGSize(width: label9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label9Rect)
        label9TextContent.draw(in: CGRect(x: label9Rect.minX, y: label9Rect.minY + (label9Rect.height - label9TextHeight) / 2, width: label9Rect.width, height: label9TextHeight), withAttributes: label9FontAttributes)
        context.restoreGState()


        //// Label 10 Drawing
        let label10Rect = CGRect(x: 108.53, y: 67.28, width: 55.4, height: 54)
        let label10TextContent = "\n20000"
        let label10Style = NSMutableParagraphStyle()
        label10Style.alignment = .center
        let label10FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 18), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label10Style]

        let label10TextHeight: CGFloat = label10TextContent.boundingRect(with: CGSize(width: label10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label10Rect)
        label10TextContent.draw(in: CGRect(x: label10Rect.minX, y: label10Rect.minY + (label10Rect.height - label10TextHeight) / 2, width: label10Rect.width, height: label10TextHeight), withAttributes: label10FontAttributes)
        context.restoreGState()


        //// Label 11 Drawing
        let label11Rect = CGRect(x: 109.98, y: 6.5, width: 54.05, height: 54)
        let label11TextContent = "\n25000"
        let label11Style = NSMutableParagraphStyle()
        label11Style.alignment = .center
        let label11FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 18), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label11Style]

        let label11TextHeight: CGFloat = label11TextContent.boundingRect(with: CGSize(width: label11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label11Rect)
        label11TextContent.draw(in: CGRect(x: label11Rect.minX, y: label11Rect.minY + (label11Rect.height - label11TextHeight) / 2, width: label11Rect.width, height: label11TextHeight), withAttributes: label11FontAttributes)
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 191.52, y: 44.18))
        bezierPath.addLine(to: CGPoint(x: 191.52, y: 375.9))
        strokeColor.setStroke()
        bezierPath.lineWidth = 0.71
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(rect: CGRect(x: 249.27, y: (negH1G3 + 362.998), width: 135.95, height: h1G3))
        fillColor2.setFill()
        rectangle13Path.fill()


        if (hiddenH2G3) {
            //// Label 12 Drawing
            let label12Rect = CGRect(x: 535.78, y: 90.72, width: 46, height: 21)
            let label12TextContent = "p<0.01"
            let label12Style = NSMutableParagraphStyle()
            label12Style.alignment = .center
            let label12FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 14), NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label12Style]

            let label12TextHeight: CGFloat = label12TextContent.boundingRect(with: CGSize(width: label12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label12FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: label12Rect)
            label12TextContent.draw(in: CGRect(x: label12Rect.minX, y: label12Rect.minY + (label12Rect.height - label12TextHeight) / 2, width: label12Rect.width, height: label12TextHeight), withAttributes: label12FontAttributes)
            context.restoreGState()
        }


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(rect: CGRect(x: 490.77, y: (negH2G3 + 361.999), width: 135.95, height: h2G3))
        fillColor3.setFill()
        rectangle15Path.fill()


        if (hiddenH1G3) {
            //// Label 13 Drawing
            let label13Rect = CGRect(x: 268.3, y: 107.07, width: 98.53, height: 108)
            let label13TextContent = "\n104%"
            let label13Style = NSMutableParagraphStyle()
            label13Style.alignment = .center
            let label13FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 36), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: label13Style]

            let label13TextHeight: CGFloat = label13TextContent.boundingRect(with: CGSize(width: label13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label13FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: label13Rect)
            label13TextContent.draw(in: CGRect(x: label13Rect.minX, y: label13Rect.minY + (label13Rect.height - label13TextHeight) / 2, width: label13Rect.width, height: label13TextHeight), withAttributes: label13FontAttributes)
            context.restoreGState()
        }


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 722.09, y: 362.2))
        bezier2Path.addLine(to: CGPoint(x: 172.74, y: 362.2))
        strokeColor.setStroke()
        bezier2Path.lineWidth = 0.93
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        if (hiddenH1G3) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 314.1, y: 168.51))
            bezier3Path.addLine(to: CGPoint(x: 314.1, y: 128.62))
            strokeColor2.setStroke()
            bezier3Path.lineWidth = 4
            bezier3Path.lineCapStyle = .round
            bezier3Path.lineJoinStyle = .round
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 314.1, y: 242.08))
            bezier4Path.addLine(to: CGPoint(x: 314.1, y: 208.06))
            strokeColor2.setStroke()
            bezier4Path.lineWidth = 4
            bezier4Path.lineCapStyle = .round
            bezier4Path.lineJoinStyle = .round
            bezier4Path.stroke()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 324.53, y: 131.35))
            bezier5Path.addLine(to: CGPoint(x: 314.25, y: 117.66))
            bezier5Path.addLine(to: CGPoint(x: 304.01, y: 131.35))
            strokeColor2.setStroke()
            bezier5Path.lineWidth = 4
            bezier5Path.lineCapStyle = .round
            bezier5Path.lineJoinStyle = .round
            bezier5Path.stroke()
        }


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 180.22, y: 106.54))
        bezier6Path.addLine(to: CGPoint(x: 202.54, y: 106.54))
        strokeColor.setStroke()
        bezier6Path.lineWidth = 0.51
        bezier6Path.lineCapStyle = .round
        bezier6Path.lineJoinStyle = .round
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 180.22, y: 172.14))
        bezier7Path.addLine(to: CGPoint(x: 202.54, y: 172.14))
        strokeColor.setStroke()
        bezier7Path.lineWidth = 0.51
        bezier7Path.lineCapStyle = .round
        bezier7Path.lineJoinStyle = .round
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 180.22, y: 233.68))
        bezier8Path.addLine(to: CGPoint(x: 202.54, y: 233.68))
        strokeColor.setStroke()
        bezier8Path.lineWidth = 0.51
        bezier8Path.lineCapStyle = .round
        bezier8Path.lineJoinStyle = .round
        bezier8Path.stroke()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 180.22, y: 293.88))
        bezier9Path.addLine(to: CGPoint(x: 202.54, y: 293.88))
        strokeColor.setStroke()
        bezier9Path.lineWidth = 0.51
        bezier9Path.lineCapStyle = .round
        bezier9Path.lineJoinStyle = .round
        bezier9Path.stroke()
        
        context.restoreGState()

    }




    @objc(GraficosResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
